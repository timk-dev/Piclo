import styles from 'src/components/style.module.css';

import reactLazyWithRetry from '@fatso83/retry-dynamic-import/react-lazy';

import home from "src/assets/home.svg";
import post from "src/assets/post.svg";
import notif from "src/assets/notif.svg";
import search from "src/assets/search.svg";
import inbox from "src/assets/inbox.svg";
import user from "src/assets/user.svg";
import logo from "src/assets/plogo.svg";

import React, { useState, useEffect, useRef } from "react";

import classNames from 'classnames';
 
import Feed from 'components/feed';
import Inbox from 'components/inbox';
import Notif from 'components/notifications';
import Post from 'components/post';
import Search from 'components/search';
import User from 'components/user';
import UserBot from './userBot';
import UserOther from './userOther';
import Register from 'components/acRegister';

import { Avatar } from 'primereact/avatar';
import FeedFollowing from './feedFollowing';

const AppCont = ({state}) => {
    console.log(state, state.data);
    const [show, setShow] = useState(false);
    const [activeElement, setActiveElement] = useState('element2');
    const [dataApi, setData] = useState(null);
    const [username, setUsername] = useState(null);
    const [value, setValue] = useState('');
    const [getSearchQuery, setGetSearchQuery] = useState(value ?? '');
    const [openUserId, setOpenUserId] = useState('');

    const handleFailureClick = () => {
        Swal.fire({
            title: "Error!",
            text: "Invalid email or password!!",
            icon: "error",
            confirmButtonColor: "rgba(136,177,198,1)",
        });
        setParentState("element6");
    };

    const handleSubmit = (e) => {
        e.preventDefault();
     
        fetch(`http://localhost:3001/api/search?search=${getSearchQuery}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        })
        .then((res) => {
            if (res.ok) {
                return res.json();
            }
            handleFailureClick();
        })
        /*.then(res => res.json())*/
        .then((data) => {
            setGetSearchQuery(data);
            console.log(data, "search");
        })
        .catch((error) => {
            throw new Error(`HTTP error: Status ${error.status}`);
        });
    };

    React.useEffect(() => {
        fetch("http://localhost:3001/api")
        .then((res) => res.json())
        .then((data) => setData(data.message));
    }, []);

    console.log(dataApi);
    console.log(getSearchQuery, "search");

    React.useEffect(() => {
        const headers = { 'Authorization': state.data }; // auth header with bearer token
        fetch("http://localhost:3001/api/user", {headers}, { credentials: "same-origin" })
        .then((res) => res.json())
        .then((username) => setUsername(username));
    }, [state]);

    console.log(username);

    const handleElementClick = (elementId) => {
        setActiveElement(elementId);
    };

    /*
    const [showUser, setUserShown] = useState(false);
    const [showInbox, setInboxShown] = useState(false);
    const [showNotif, setNotifShown] = useState(false);
    */

    return(
        <main className={styles.home}>
            <article className={classNames(styles.working, styles.picloApp)}>
                <div className={styles.topHeader}>
                    <div className={styles.topHeaderRight}>
                        <div onClick={() => handleElementClick('element7')} /*onClick={() => setUserShown(!showUser)}*/ className={classNames(styles.avatarRound, styles.avatar)}>
                            {username &&
                            <Avatar 
                                className={classNames(styles.roundIt)}
                                image={username && username.avatar ? username.avatar : null}
                                label={`${username.name}`.slice(0, 2)}
                                loading="lazy"
                                shape='circle' 
                            >
                            </Avatar> 
                            }
                        </div>
                
                    { activeElement === "element1" ? <h1 className={styles.feedLogo}>Piclo</h1> : null }
                    { activeElement === "element2" ? <h1 className={styles.newH1}>sleazyd</h1> : null }
                    { activeElement === "element3" ? 
                        <svg className={styles.svg} width="6em" height="6em" viewBox="0 0 259 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0.888 32V0.223997H5.064L16.44 15.296L27.624 0.223997H31.8V32H28.2V5.696L16.44 20.816L4.488 5.696V32H0.888ZM49.4479 32.384C47.0159 32.384 44.8879 31.84 43.0639 30.752C41.2399 29.632 39.8159 28.128 38.7919 26.24C37.7999 24.352 37.3039 22.272 37.3039 20C37.3039 17.696 37.7839 15.616 38.7439 13.76C39.7039 11.872 41.0799 10.384 42.8719 9.296C44.6639 8.176 46.7759 7.616 49.2079 7.616C51.6719 7.616 53.7839 8.176 55.5439 9.296C57.3359 10.384 58.7119 11.872 59.6719 13.76C60.6319 15.616 61.1119 17.696 61.1119 20V21.44H40.9999C41.1919 22.848 41.6399 24.144 42.3439 25.328C43.0799 26.48 44.0559 27.408 45.2719 28.112C46.4879 28.784 47.8959 29.12 49.4959 29.12C51.1919 29.12 52.6159 28.752 53.7679 28.016C54.9199 27.248 55.8159 26.272 56.4559 25.088H60.3919C59.5599 27.232 58.2319 28.992 56.4079 30.368C54.6159 31.712 52.2959 32.384 49.4479 32.384ZM41.0479 18.08H57.3679C57.0479 16.032 56.1839 14.32 54.7759 12.944C53.3679 11.568 51.5119 10.88 49.2079 10.88C46.9039 10.88 45.0479 11.568 43.6399 12.944C42.2639 14.32 41.3999 16.032 41.0479 18.08ZM74.2466 32.384C72.0386 32.384 70.1666 32.016 68.6306 31.28C67.1266 30.544 65.9746 29.584 65.1746 28.4C64.3746 27.184 63.9266 25.872 63.8306 24.464H67.5746C67.6706 25.264 67.9426 26.048 68.3906 26.816C68.8706 27.552 69.5906 28.16 70.5506 28.64C71.5106 29.088 72.7586 29.312 74.2946 29.312C74.7746 29.312 75.3666 29.264 76.0706 29.168C76.7746 29.072 77.4466 28.896 78.0866 28.64C78.7586 28.384 79.3186 28 79.7666 27.488C80.2146 26.976 80.4386 26.32 80.4386 25.52C80.4386 24.528 80.0546 23.76 79.2866 23.216C78.5186 22.672 77.5266 22.256 76.3106 21.968C75.0946 21.648 73.7986 21.344 72.4226 21.056C71.0786 20.768 69.7986 20.4 68.5826 19.952C67.3666 19.472 66.3746 18.816 65.6066 17.984C64.8386 17.12 64.4546 15.952 64.4546 14.48C64.4546 12.304 65.2386 10.624 66.8066 9.44C68.4066 8.224 70.7586 7.616 73.8626 7.616C75.9746 7.616 77.6866 7.952 78.9986 8.624C80.3426 9.264 81.3506 10.096 82.0226 11.12C82.7266 12.144 83.1426 13.248 83.2706 14.432H79.6226C79.4946 13.408 78.9826 12.528 78.0866 11.792C77.2226 11.056 75.7826 10.688 73.7666 10.688C69.9586 10.688 68.0546 11.84 68.0546 14.144C68.0546 15.104 68.4386 15.84 69.2066 16.352C69.9746 16.864 70.9666 17.28 72.1826 17.6C73.3986 17.888 74.6786 18.176 76.0226 18.464C77.3986 18.72 78.6946 19.088 79.9106 19.568C81.1266 20.048 82.1186 20.736 82.8866 21.632C83.6546 22.496 84.0386 23.68 84.0386 25.184C84.0386 27.52 83.1426 29.312 81.3506 30.56C79.5906 31.776 77.2226 32.384 74.2466 32.384ZM97.4029 32.384C95.1949 32.384 93.3229 32.016 91.7869 31.28C90.2829 30.544 89.1309 29.584 88.3309 28.4C87.5309 27.184 87.0829 25.872 86.9869 24.464H90.7309C90.8269 25.264 91.0989 26.048 91.5469 26.816C92.0269 27.552 92.7469 28.16 93.7069 28.64C94.6669 29.088 95.9149 29.312 97.4509 29.312C97.9309 29.312 98.5229 29.264 99.2269 29.168C99.9309 29.072 100.603 28.896 101.243 28.64C101.915 28.384 102.475 28 102.923 27.488C103.371 26.976 103.595 26.32 103.595 25.52C103.595 24.528 103.211 23.76 102.443 23.216C101.675 22.672 100.683 22.256 99.4669 21.968C98.2509 21.648 96.9549 21.344 95.5789 21.056C94.2349 20.768 92.9549 20.4 91.7389 19.952C90.5229 19.472 89.5309 18.816 88.7629 17.984C87.9949 17.12 87.6109 15.952 87.6109 14.48C87.6109 12.304 88.3949 10.624 89.9629 9.44C91.5629 8.224 93.9149 7.616 97.0189 7.616C99.1309 7.616 100.843 7.952 102.155 8.624C103.499 9.264 104.507 10.096 105.179 11.12C105.883 12.144 106.299 13.248 106.427 14.432H102.779C102.651 13.408 102.139 12.528 101.243 11.792C100.379 11.056 98.9389 10.688 96.9229 10.688C93.1149 10.688 91.2109 11.84 91.2109 14.144C91.2109 15.104 91.5949 15.84 92.3629 16.352C93.1309 16.864 94.1229 17.28 95.3389 17.6C96.5549 17.888 97.8349 18.176 99.1789 18.464C100.555 18.72 101.851 19.088 103.067 19.568C104.283 20.048 105.275 20.736 106.043 21.632C106.811 22.496 107.195 23.68 107.195 25.184C107.195 27.52 106.299 29.312 104.507 30.56C102.747 31.776 100.379 32.384 97.4029 32.384ZM121.951 32.384C119.615 32.384 117.567 31.84 115.807 30.752C114.079 29.632 112.735 28.128 111.775 26.24C110.815 24.352 110.335 22.272 110.335 20C110.335 17.696 110.815 15.616 111.775 13.76C112.735 11.872 114.079 10.384 115.807 9.296C117.567 8.176 119.615 7.616 121.951 7.616C123.935 7.616 125.631 8 127.039 8.768C128.479 9.536 129.647 10.576 130.543 11.888V8H134.143V32H130.543V28.16C129.647 29.44 128.479 30.464 127.039 31.232C125.631 32 123.935 32.384 121.951 32.384ZM122.431 29.12C124.223 29.12 125.727 28.704 126.943 27.872C128.191 27.04 129.135 25.936 129.775 24.56C130.415 23.152 130.735 21.632 130.735 20C130.735 18.336 130.415 16.816 129.775 15.44C129.135 14.064 128.191 12.96 126.943 12.128C125.727 11.296 124.223 10.88 122.431 10.88C120.671 10.88 119.151 11.296 117.871 12.128C116.591 12.96 115.615 14.064 114.943 15.44C114.271 16.816 113.935 18.336 113.935 20C113.935 21.632 114.271 23.152 114.943 24.56C115.615 25.936 116.591 27.04 117.871 27.872C119.151 28.704 120.671 29.12 122.431 29.12ZM151.362 41.888C148.354 41.888 145.906 41.232 144.018 39.92C142.13 38.64 140.85 36.96 140.178 34.88H144.162C144.642 36.064 145.474 36.976 146.658 37.616C147.842 38.288 149.346 38.624 151.17 38.624C153.922 38.624 155.922 37.968 157.17 36.656C158.45 35.376 159.09 33.504 159.09 31.04V27.728C158.194 29.008 157.026 30.048 155.586 30.848C154.178 31.616 152.482 32 150.498 32C148.162 32 146.114 31.472 144.354 30.416C142.626 29.328 141.282 27.856 140.322 26C139.362 24.144 138.882 22.08 138.882 19.808C138.882 17.504 139.362 15.44 140.322 13.616C141.282 11.76 142.626 10.304 144.354 9.248C146.114 8.16 148.162 7.616 150.498 7.616C152.482 7.616 154.178 8 155.586 8.768C157.026 9.504 158.194 10.528 159.09 11.84V8H162.69V31.28C162.69 34.704 161.698 37.328 159.714 39.152C157.762 40.976 154.978 41.888 151.362 41.888ZM150.978 28.736C152.738 28.736 154.226 28.336 155.442 27.536C156.69 26.736 157.634 25.664 158.274 24.32C158.946 22.944 159.282 21.44 159.282 19.808C159.282 18.144 158.946 16.64 158.274 15.296C157.634 13.952 156.69 12.88 155.442 12.08C154.226 11.28 152.738 10.88 150.978 10.88C149.218 10.88 147.698 11.28 146.418 12.08C145.138 12.88 144.162 13.952 143.49 15.296C142.818 16.64 142.482 18.144 142.482 19.808C142.482 21.44 142.818 22.944 143.49 24.32C144.162 25.664 145.138 26.736 146.418 27.536C147.698 28.336 149.218 28.736 150.978 28.736ZM179.573 32.384C177.141 32.384 175.013 31.84 173.189 30.752C171.365 29.632 169.941 28.128 168.917 26.24C167.925 24.352 167.429 22.272 167.429 20C167.429 17.696 167.909 15.616 168.869 13.76C169.829 11.872 171.205 10.384 172.997 9.296C174.789 8.176 176.901 7.616 179.333 7.616C181.797 7.616 183.909 8.176 185.669 9.296C187.461 10.384 188.837 11.872 189.797 13.76C190.757 15.616 191.237 17.696 191.237 20V21.44H171.125C171.317 22.848 171.765 24.144 172.469 25.328C173.205 26.48 174.181 27.408 175.397 28.112C176.613 28.784 178.021 29.12 179.621 29.12C181.317 29.12 182.741 28.752 183.893 28.016C185.045 27.248 185.941 26.272 186.581 25.088H190.517C189.685 27.232 188.357 28.992 186.533 30.368C184.741 31.712 182.421 32.384 179.573 32.384ZM171.173 18.08H187.493C187.173 16.032 186.309 14.32 184.901 12.944C183.493 11.568 181.637 10.88 179.333 10.88C177.029 10.88 175.173 11.568 173.765 12.944C172.389 14.32 171.525 16.032 171.173 18.08ZM204.372 32.384C202.164 32.384 200.292 32.016 198.756 31.28C197.252 30.544 196.1 29.584 195.3 28.4C194.5 27.184 194.052 25.872 193.956 24.464H197.7C197.796 25.264 198.068 26.048 198.516 26.816C198.996 27.552 199.716 28.16 200.676 28.64C201.636 29.088 202.884 29.312 204.42 29.312C204.9 29.312 205.492 29.264 206.196 29.168C206.9 29.072 207.572 28.896 208.212 28.64C208.884 28.384 209.444 28 209.892 27.488C210.34 26.976 210.564 26.32 210.564 25.52C210.564 24.528 210.18 23.76 209.412 23.216C208.644 22.672 207.652 22.256 206.436 21.968C205.22 21.648 203.924 21.344 202.548 21.056C201.204 20.768 199.924 20.4 198.708 19.952C197.492 19.472 196.5 18.816 195.732 17.984C194.964 17.12 194.58 15.952 194.58 14.48C194.58 12.304 195.364 10.624 196.932 9.44C198.532 8.224 200.884 7.616 203.988 7.616C206.1 7.616 207.812 7.952 209.124 8.624C210.468 9.264 211.476 10.096 212.148 11.12C212.852 12.144 213.268 13.248 213.396 14.432H209.748C209.62 13.408 209.108 12.528 208.212 11.792C207.348 11.056 205.908 10.688 203.892 10.688C200.084 10.688 198.18 11.84 198.18 14.144C198.18 15.104 198.564 15.84 199.332 16.352C200.1 16.864 201.092 17.28 202.308 17.6C203.524 17.888 204.804 18.176 206.148 18.464C207.524 18.72 208.82 19.088 210.036 19.568C211.252 20.048 212.244 20.736 213.012 21.632C213.78 22.496 214.164 23.68 214.164 25.184C214.164 27.52 213.268 29.312 211.476 30.56C209.716 31.776 207.348 32.384 204.372 32.384Z" fill="black"/>
                        </svg>                        
                        : 
                        null 
                    }
                    { activeElement === "element4" ? 
                        <svg className={styles.svg} width="6em" height="6em" viewBox="0 0 265 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0.888 34V2.224H5.064L24.696 28.96V2.224H28.296V34H24.12L4.488 7.168V34H0.888ZM45.7391 34.384C43.3071 34.384 41.1951 33.84 39.4031 32.752C37.6111 31.632 36.2351 30.128 35.2751 28.24C34.3151 26.352 33.8351 24.272 33.8351 22C33.8351 19.696 34.3151 17.616 35.2751 15.76C36.2351 13.872 37.6111 12.384 39.4031 11.296C41.1951 10.176 43.3071 9.616 45.7391 9.616C48.2031 9.616 50.3151 10.176 52.0751 11.296C53.8671 12.384 55.2431 13.872 56.2031 15.76C57.1631 17.616 57.6431 19.696 57.6431 22C57.6431 24.272 57.1631 26.352 56.2031 28.24C55.2431 30.128 53.8671 31.632 52.0751 32.752C50.3151 33.84 48.2031 34.384 45.7391 34.384ZM45.7391 31.12C47.5311 31.12 49.0351 30.704 50.2511 29.872C51.4991 29.04 52.4431 27.936 53.0831 26.56C53.7231 25.152 54.0431 23.632 54.0431 22C54.0431 20.336 53.7231 18.816 53.0831 17.44C52.4431 16.064 51.4991 14.96 50.2511 14.128C49.0351 13.296 47.5311 12.88 45.7391 12.88C43.9791 12.88 42.4751 13.296 41.2271 14.128C39.9791 14.96 39.0351 16.064 38.3951 17.44C37.7551 18.816 37.4351 20.336 37.4351 22C37.4351 23.632 37.7551 25.152 38.3951 26.56C39.0351 27.936 39.9791 29.04 41.2271 29.872C42.4751 30.704 43.9791 31.12 45.7391 31.12ZM65.0089 34V13.168H60.1129V10H65.0089V1.408H68.6089V10H74.1289V13.168H68.6089V34H65.0089ZM77.9291 5.968V1.264H81.8171V5.968H77.9291ZM78.0731 34V10H81.6731V34H78.0731ZM89.5489 34V13.168H85.4209V10H89.5489V7.888C89.5489 5.264 90.3329 3.296 91.9009 1.984C93.5009 0.671999 95.6769 0.0159998 98.4289 0.0159998H98.7169V3.424H98.2369C96.5729 3.424 95.3089 3.808 94.4449 4.576C93.5809 5.312 93.1489 6.512 93.1489 8.176V10H105.485L105.389 10.096V34H101.789V13.168H93.1489V34H89.5489ZM101.645 5.968V1.264H105.533V5.968H101.645ZM122.049 34.384C119.649 34.384 117.569 33.84 115.809 32.752C114.049 31.632 112.673 30.128 111.681 28.24C110.721 26.352 110.241 24.272 110.241 22C110.241 19.696 110.721 17.616 111.681 15.76C112.673 13.872 114.049 12.384 115.809 11.296C117.569 10.176 119.649 9.616 122.049 9.616C124.897 9.616 127.313 10.352 129.297 11.824C131.313 13.296 132.673 15.2 133.377 17.536H129.489C128.945 16.16 128.065 15.04 126.849 14.176C125.665 13.312 124.225 12.88 122.529 12.88C120.769 12.88 119.233 13.296 117.921 14.128C116.609 14.96 115.601 16.064 114.897 17.44C114.193 18.816 113.841 20.336 113.841 22C113.841 23.632 114.193 25.152 114.897 26.56C115.601 27.936 116.609 29.04 117.921 29.872C119.233 30.704 120.769 31.12 122.529 31.12C124.225 31.12 125.665 30.688 126.849 29.824C128.065 28.96 128.945 27.84 129.489 26.464H133.377C132.673 28.8 131.313 30.704 129.297 32.176C127.313 33.648 124.897 34.384 122.049 34.384ZM147.967 34.384C145.631 34.384 143.583 33.84 141.823 32.752C140.095 31.632 138.751 30.128 137.791 28.24C136.831 26.352 136.351 24.272 136.351 22C136.351 19.696 136.831 17.616 137.791 15.76C138.751 13.872 140.095 12.384 141.823 11.296C143.583 10.176 145.631 9.616 147.967 9.616C149.951 9.616 151.647 10 153.055 10.768C154.495 11.536 155.663 12.576 156.559 13.888V10H160.159V34H156.559V30.16C155.663 31.44 154.495 32.464 153.055 33.232C151.647 34 149.951 34.384 147.967 34.384ZM148.447 31.12C150.239 31.12 151.743 30.704 152.959 29.872C154.207 29.04 155.151 27.936 155.791 26.56C156.431 25.152 156.751 23.632 156.751 22C156.751 20.336 156.431 18.816 155.791 17.44C155.151 16.064 154.207 14.96 152.959 14.128C151.743 13.296 150.239 12.88 148.447 12.88C146.687 12.88 145.167 13.296 143.887 14.128C142.607 14.96 141.631 16.064 140.959 17.44C140.287 18.816 139.951 20.336 139.951 22C139.951 23.632 140.287 25.152 140.959 26.56C141.631 27.936 142.607 29.04 143.887 29.872C145.167 30.704 146.687 31.12 148.447 31.12ZM168.978 34V13.168H164.082V10H168.978V1.408H172.578V10H178.098V13.168H172.578V34H168.978ZM181.898 5.968V1.264H185.786V5.968H181.898ZM182.042 34V10H185.642V34H182.042ZM202.302 34.384C199.87 34.384 197.758 33.84 195.966 32.752C194.174 31.632 192.798 30.128 191.838 28.24C190.878 26.352 190.398 24.272 190.398 22C190.398 19.696 190.878 17.616 191.838 15.76C192.798 13.872 194.174 12.384 195.966 11.296C197.758 10.176 199.87 9.616 202.302 9.616C204.766 9.616 206.878 10.176 208.638 11.296C210.43 12.384 211.806 13.872 212.766 15.76C213.726 17.616 214.206 19.696 214.206 22C214.206 24.272 213.726 26.352 212.766 28.24C211.806 30.128 210.43 31.632 208.638 32.752C206.878 33.84 204.766 34.384 202.302 34.384ZM202.302 31.12C204.094 31.12 205.598 30.704 206.814 29.872C208.062 29.04 209.006 27.936 209.646 26.56C210.286 25.152 210.606 23.632 210.606 22C210.606 20.336 210.286 18.816 209.646 17.44C209.006 16.064 208.062 14.96 206.814 14.128C205.598 13.296 204.094 12.88 202.302 12.88C200.542 12.88 199.038 13.296 197.79 14.128C196.542 14.96 195.598 16.064 194.958 17.44C194.318 18.816 193.998 20.336 193.998 22C193.998 23.632 194.318 25.152 194.958 26.56C195.598 27.936 196.542 29.04 197.79 29.872C199.038 30.704 200.542 31.12 202.302 31.12ZM218.979 34V10H222.579V13.744C223.443 12.592 224.499 11.616 225.747 10.816C226.995 10.016 228.595 9.616 230.547 9.616C232.211 9.616 233.763 10.016 235.203 10.816C236.675 11.584 237.859 12.752 238.755 14.32C239.683 15.856 240.147 17.76 240.147 20.032V34H236.547V20.128C236.547 17.952 235.923 16.208 234.675 14.896C233.427 13.552 231.811 12.88 229.827 12.88C228.483 12.88 227.267 13.184 226.179 13.792C225.091 14.4 224.211 15.264 223.539 16.384C222.899 17.472 222.579 18.736 222.579 20.176V34H218.979ZM254.903 34.384C252.695 34.384 250.823 34.016 249.287 33.28C247.783 32.544 246.631 31.584 245.831 30.4C245.031 29.184 244.583 27.872 244.487 26.464H248.231C248.327 27.264 248.599 28.048 249.047 28.816C249.527 29.552 250.247 30.16 251.207 30.64C252.167 31.088 253.415 31.312 254.951 31.312C255.431 31.312 256.023 31.264 256.727 31.168C257.431 31.072 258.103 30.896 258.743 30.64C259.415 30.384 259.975 30 260.423 29.488C260.871 28.976 261.095 28.32 261.095 27.52C261.095 26.528 260.711 25.76 259.943 25.216C259.175 24.672 258.183 24.256 256.967 23.968C255.751 23.648 254.455 23.344 253.079 23.056C251.735 22.768 250.455 22.4 249.239 21.952C248.023 21.472 247.031 20.816 246.263 19.984C245.495 19.12 245.111 17.952 245.111 16.48C245.111 14.304 245.895 12.624 247.463 11.44C249.063 10.224 251.415 9.616 254.519 9.616C256.631 9.616 258.343 9.952 259.655 10.624C260.999 11.264 262.007 12.096 262.679 13.12C263.383 14.144 263.799 15.248 263.927 16.432H260.279C260.151 15.408 259.639 14.528 258.743 13.792C257.879 13.056 256.439 12.688 254.423 12.688C250.615 12.688 248.711 13.84 248.711 16.144C248.711 17.104 249.095 17.84 249.863 18.352C250.631 18.864 251.623 19.28 252.839 19.6C254.055 19.888 255.335 20.176 256.679 20.464C258.055 20.72 259.351 21.088 260.567 21.568C261.783 22.048 262.775 22.736 263.543 23.632C264.311 24.496 264.695 25.68 264.695 27.184C264.695 29.52 263.799 31.312 262.007 32.56C260.247 33.776 257.879 34.384 254.903 34.384Z" fill="black"/>
                        </svg>
                        : 
                        null 
                    }
                    { activeElement === "element5" ? 
                        <svg className={styles.svg} width="6em" height="6em" viewBox="0 0 259 35" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M0.888 34V2.224H5.064L16.44 17.296L27.624 2.224H31.8V34H28.2V7.696L16.44 22.816L4.488 7.696V34H0.888ZM48.9199 34.384C46.5839 34.384 44.5359 33.84 42.7759 32.752C41.0479 31.632 39.7039 30.128 38.7439 28.24C37.7839 26.352 37.3039 24.272 37.3039 22C37.3039 19.696 37.7839 17.616 38.7439 15.76C39.7039 13.872 41.0479 12.384 42.7759 11.296C44.5359 10.176 46.5839 9.616 48.9199 9.616C50.9039 9.616 52.5999 10 54.0079 10.768C55.4479 11.536 56.6159 12.576 57.5119 13.888V10H61.1119V34H57.5119V30.16C56.6159 31.44 55.4479 32.464 54.0079 33.232C52.5999 34 50.9039 34.384 48.9199 34.384ZM49.3999 31.12C51.1919 31.12 52.6959 30.704 53.9119 29.872C55.1599 29.04 56.1039 27.936 56.7439 26.56C57.3839 25.152 57.7039 23.632 57.7039 22C57.7039 20.336 57.3839 18.816 56.7439 17.44C56.1039 16.064 55.1599 14.96 53.9119 14.128C52.6959 13.296 51.1919 12.88 49.3999 12.88C47.6399 12.88 46.1199 13.296 44.8399 14.128C43.5599 14.96 42.5839 16.064 41.9119 17.44C41.2399 18.816 40.9039 20.336 40.9039 22C40.9039 23.632 41.2399 25.152 41.9119 26.56C42.5839 27.936 43.5599 29.04 44.8399 29.872C46.1199 30.704 47.6399 31.12 49.3999 31.12ZM67.3388 34V0.399998H70.9388V21.904L82.5068 10H87.5468L77.8988 19.456L88.2668 34H83.8508L75.4508 21.952L70.9388 26.416V34H67.3388ZM100.87 34.384C98.4378 34.384 96.3098 33.84 94.4858 32.752C92.6618 31.632 91.2378 30.128 90.2138 28.24C89.2218 26.352 88.7258 24.272 88.7258 22C88.7258 19.696 89.2058 17.616 90.1658 15.76C91.1258 13.872 92.5018 12.384 94.2938 11.296C96.0858 10.176 98.1978 9.616 100.63 9.616C103.094 9.616 105.206 10.176 106.966 11.296C108.758 12.384 110.134 13.872 111.094 15.76C112.054 17.616 112.534 19.696 112.534 22V23.44H92.4218C92.6138 24.848 93.0618 26.144 93.7658 27.328C94.5018 28.48 95.4778 29.408 96.6938 30.112C97.9098 30.784 99.3178 31.12 100.918 31.12C102.614 31.12 104.038 30.752 105.19 30.016C106.342 29.248 107.238 28.272 107.878 27.088H111.814C110.982 29.232 109.654 30.992 107.83 32.368C106.038 33.712 103.718 34.384 100.87 34.384ZM92.4698 20.08H108.79C108.47 18.032 107.606 16.32 106.198 14.944C104.79 13.568 102.934 12.88 100.63 12.88C98.3258 12.88 96.4698 13.568 95.0618 14.944C93.6858 16.32 92.8218 18.032 92.4698 20.08ZM137.279 34.384C134.943 34.384 132.895 33.84 131.135 32.752C129.407 31.632 128.063 30.128 127.103 28.24C126.143 26.352 125.663 24.272 125.663 22C125.663 19.696 126.143 17.616 127.103 15.76C128.063 13.872 129.407 12.384 131.135 11.296C132.895 10.176 134.943 9.616 137.279 9.616C139.263 9.616 140.959 10 142.367 10.768C143.807 11.536 144.975 12.576 145.871 13.888V10H149.471V34H145.871V30.16C144.975 31.44 143.807 32.464 142.367 33.232C140.959 34 139.263 34.384 137.279 34.384ZM137.759 31.12C139.551 31.12 141.055 30.704 142.271 29.872C143.519 29.04 144.463 27.936 145.103 26.56C145.743 25.152 146.063 23.632 146.063 22C146.063 20.336 145.743 18.816 145.103 17.44C144.463 16.064 143.519 14.96 142.271 14.128C141.055 13.296 139.551 12.88 137.759 12.88C135.999 12.88 134.479 13.296 133.199 14.128C131.919 14.96 130.943 16.064 130.271 17.44C129.599 18.816 129.263 20.336 129.263 22C129.263 23.632 129.599 25.152 130.271 26.56C130.943 27.936 131.919 29.04 133.199 29.872C134.479 30.704 135.999 31.12 137.759 31.12ZM166.685 34V2.224H180.989C184.381 2.224 187.053 3.152 189.005 5.008C190.957 6.832 191.933 9.312 191.933 12.448C191.933 15.584 190.957 18.08 189.005 19.936C187.053 21.76 184.381 22.672 180.989 22.672H170.285V34H166.685ZM170.285 19.312H180.749C183.245 19.312 185.133 18.704 186.413 17.488C187.693 16.272 188.333 14.592 188.333 12.448C188.333 10.336 187.693 8.672 186.413 7.456C185.133 6.24 183.245 5.632 180.749 5.632H170.285V19.312ZM206.474 34.384C204.042 34.384 201.93 33.84 200.138 32.752C198.346 31.632 196.97 30.128 196.01 28.24C195.05 26.352 194.57 24.272 194.57 22C194.57 19.696 195.05 17.616 196.01 15.76C196.97 13.872 198.346 12.384 200.138 11.296C201.93 10.176 204.042 9.616 206.474 9.616C208.938 9.616 211.05 10.176 212.81 11.296C214.602 12.384 215.978 13.872 216.938 15.76C217.898 17.616 218.378 19.696 218.378 22C218.378 24.272 217.898 26.352 216.938 28.24C215.978 30.128 214.602 31.632 212.81 32.752C211.05 33.84 208.938 34.384 206.474 34.384ZM206.474 31.12C208.266 31.12 209.77 30.704 210.986 29.872C212.234 29.04 213.178 27.936 213.818 26.56C214.458 25.152 214.778 23.632 214.778 22C214.778 20.336 214.458 18.816 213.818 17.44C213.178 16.064 212.234 14.96 210.986 14.128C209.77 13.296 208.266 12.88 206.474 12.88C204.714 12.88 203.21 13.296 201.962 14.128C200.714 14.96 199.77 16.064 199.13 17.44C198.49 18.816 198.17 20.336 198.17 22C198.17 23.632 198.49 25.152 199.13 26.56C199.77 27.936 200.714 29.04 201.962 29.872C203.21 30.704 204.714 31.12 206.474 31.12ZM231.887 34.384C229.679 34.384 227.807 34.016 226.271 33.28C224.767 32.544 223.615 31.584 222.815 30.4C222.015 29.184 221.567 27.872 221.471 26.464H225.215C225.311 27.264 225.583 28.048 226.031 28.816C226.511 29.552 227.231 30.16 228.191 30.64C229.151 31.088 230.399 31.312 231.935 31.312C232.415 31.312 233.007 31.264 233.711 31.168C234.415 31.072 235.087 30.896 235.727 30.64C236.399 30.384 236.959 30 237.407 29.488C237.855 28.976 238.079 28.32 238.079 27.52C238.079 26.528 237.695 25.76 236.927 25.216C236.159 24.672 235.167 24.256 233.951 23.968C232.735 23.648 231.439 23.344 230.063 23.056C228.719 22.768 227.439 22.4 226.223 21.952C225.007 21.472 224.015 20.816 223.247 19.984C222.479 19.12 222.095 17.952 222.095 16.48C222.095 14.304 222.879 12.624 224.447 11.44C226.047 10.224 228.399 9.616 231.503 9.616C233.615 9.616 235.327 9.952 236.639 10.624C237.983 11.264 238.991 12.096 239.663 13.12C240.367 14.144 240.783 15.248 240.911 16.432H237.263C237.135 15.408 236.623 14.528 235.727 13.792C234.863 13.056 233.423 12.688 231.407 12.688C227.599 12.688 225.695 13.84 225.695 16.144C225.695 17.104 226.079 17.84 226.847 18.352C227.615 18.864 228.607 19.28 229.823 19.6C231.039 19.888 232.319 20.176 233.663 20.464C235.039 20.72 236.335 21.088 237.551 21.568C238.767 22.048 239.759 22.736 240.527 23.632C241.295 24.496 241.679 25.68 241.679 27.184C241.679 29.52 240.783 31.312 238.991 32.56C237.231 33.776 234.863 34.384 231.887 34.384ZM248.9 34V13.168H244.004V10H248.9V1.408H252.5V10H258.02V13.168H252.5V34H248.9Z" fill="black"/>
                        </svg>
                        :
                        null 
                    }
                    { activeElement === "element7" ? <h1 className={styles.newH1}>{username && username.name}</h1> : null }
                    { activeElement === "element8" ? <h1 className={styles.newH1}>Create an Account</h1> : null }
                    { activeElement === "element9" ? 
                        <svg onClick={() => handleElementClick('element6')} className={styles.svg} width="1.5em" height="1.5em" viewBox="0 0 35 28" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M13.888 27.024L0.448 13.584L13.888 0.143998V7.488H34.672V19.68H13.888V27.024ZM12.448 23.52V18.24H33.232V8.928H12.448V3.648L2.512 13.584L12.448 23.52Z" fill="black"/>
                        </svg>
                        : 
                        null 
                    }
                    { activeElement === "element10" ? <div className={styles.topTitle}><h1 className={styles.feedLogo}>Piclo</h1><span>following</span></div> : null }
                    </div>

                    { activeElement === "element6" ? 
                        <form onSubmit={handleSubmit} className={styles.form}>
                            <label htmlFor="search">
                                <input className={styles.searchInput} type="text" required placeholder="Search" id="search" value={getSearchQuery} onInput={(e) => {setGetSearchQuery(e.target.value)}} />
                                <div className={styles.fancyBg} />
                                <div value={""} onClick={() => {setGetSearchQuery(value)}} className={styles.searchIcon}>
                                    <svg xmlns="http://www.w3.org/2000/svg" className={styles.h5} viewBox="0 0 20 20" fill="currentColor">
                                        <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                                    </svg>
                                </div>
                                <button title='Submit' type="submit" className={styles.followBtn}>
                                    <svg viewBox="0 0 24 24" aria-hidden="true" className={styles.r14}>
                                        <g>
                                            <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z" />
                                        </g>
                                    </svg>
                                </button>
                            </label>
                        </form> 
                        : 
                        null 
                    }
                    {activeElement === "element6" || activeElement === "element9" ? 
                        null
                        : 
                        <div onClick={() => handleElementClick('element6')} className={styles.search}>
                            <img rel='preload preconnect' loading='lazy' src={search} width='90%' height='90%' alt='Search Icon'>
                            </img>
                        </div>
                    }
                </div>
                
                {activeElement === 'element1' && <Feed bearToken={state.data} setParentState={setActiveElement} />}
                {activeElement === 'element2' && <User />}{/*<User />*/}
                {activeElement === 'element3' && <Inbox />}
                {activeElement === 'element4' && <Notif />}
                {activeElement === 'element5' && <Post accAvatar={username && username.avatar} accName={username && username.name} bearToken={state.data} setParentState={setActiveElement} />}
                {activeElement === 'element6' && <Search key={getSearchQuery} foundId={setOpenUserId} userSearch={getSearchQuery && getSearchQuery} setParentState={setActiveElement} />}
                {activeElement === 'element7' && <UserBot key={state.data} bearToken={state.data} />}
                {activeElement === 'element8' && <Register setParentState={setActiveElement} />}
                {activeElement === 'element9' && <UserOther key={getSearchQuery} bearToken={state.data} loginId={username.id} idpro={openUserId} dataSearch={getSearchQuery} />}
                {activeElement === 'element10' && <FeedFollowing loginId={username.id} bearToken={state.data} setParentState={setActiveElement} />}
                {/*
                { show ? <Feed /> : null }
                { showUser ? <User /> : null}
                { showInbox ? <Inbox /> : null }
                { showNotif ? <Notif /> : null }
                */}

                <div className={styles.bottomFooter}>
                    <input type="checkbox" id="theme-mode" className={styles.mode} hidden />
                    <div className={styles.container}>
                        <div className={styles.wrap}>
                            <input defaultChecked onClick={() => handleElementClick('element10')} /*onClick={() => setShow(!show)}*/ type="radio" id="rd-1" name="radio" className={styles.rd1} hidden />
                            <label htmlFor="rd-1" className={styles.label} style={{index: "0"}}>
                                <img rel='preload preconnect' loading='lazy' src={home} width='25px' height='15px' alt='Home Icon'>
                                </img>
                                <span>
                                    Home
                                </span>
                            </label>
                            <input onClick={() => handleElementClick('element5')} type="radio" id="rd-2" name="radio" className={styles.rd2} hidden />
                            <label htmlFor="rd-2" className={styles.label} style={{index: "1"}}>
                                <img rel='preload preconnect' loading='lazy' src={post} width='25px' height='15px' alt='Post Icon'>
                                </img>
                                <span>Post</span>
                            </label>
                            <input onClick={() => handleElementClick('element4')} /*onClick={() => setNotifShown(!showNotif)}*/ type="radio" id="rd-3" name="radio" className={styles.rd3} hidden />
                            <label htmlFor="rd-3" className={styles.label} style={{index: "2"}}>
                                <img rel='preload preconnect' loading='lazy' src={notif} width='25px' height='15px' alt='Notification Icon'>
                                </img>
                                <span>Notifications</span>
                            </label>
                            <input onClick={() => handleElementClick('element3')} /*onClick={() => setInboxShown(!showInbox)}*/ type="radio" id="rd-4" name="radio" className={styles.rd4} hidden />
                            <label htmlFor="rd-4" className={styles.label} style={{index: "3"}}>
                                <img rel='preload preconnect' loading='lazy' src={inbox} width='25px' height='15px' alt='Inbox Icon'>
                                </img>
                                <span>Inbox</span>
                            </label>
                            <div className={styles.bar} />
                            <div className={styles.slidebar} />
                        </div>
                    </div>
                </div>
            </article>
        </main>
    );
}

export default AppCont;